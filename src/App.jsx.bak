import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Brain, Settings, BarChart3, Calculator, Eye, EyeOff } from 'lucide-react'
import './App.css'

function App() {
  const [apiKey, setApiKey] = useState('')
  const [problemText, setProblemText] = useState('')
  const [apiKeyVisible, setApiKeyVisible] = useState(false)
  const [isAnalyzing, setIsAnalyzing] = useState(false)

  const handleAnalyze = () => {
    if (!apiKey || !problemText.trim()) {
      alert('APIキーと問題文を入力してください')
      return
    }
    setIsAnalyzing(true)
    // 模擬的な分析処理
    setTimeout(() => {
      setIsAnalyzing(false)
      alert('分析が完了しました（デモ）')
    }, 3000)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto p-6 max-w-6xl">
        {/* ヘッダー */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
              <Brain className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                ゲーム理論分析エージェント
              </h1>
              <p className="text-gray-600">
                Gemini APIを使用したOR分析・ゲーム理論の段階的分析システム
              </p>
            </div>
          </div>
          <div className="flex gap-2">
            <Badge variant="secondary">Gemini AI</Badge>
            <Badge variant="secondary">ゲーム理論</Badge>
            <Badge variant="secondary">OR分析</Badge>
            <Badge variant="secondary">段階的分析</Badge>
          </div>
        </div>

        {/* メインコンテンツ */}
        <Tabs defaultValue="analysis" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="analysis" className="flex items-center gap-2">
              <Brain className="h-4 w-4" />
              分析
            </TabsTrigger>
            <TabsTrigger value="results" className="flex items-center gap-2">
              <Calculator className="h-4 w-4" />
              結果
            </TabsTrigger>
            <TabsTrigger value="visualization" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" />
              可視化
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              設定
            </TabsTrigger>
          </TabsList>

          {/* 分析タブ */}
          <TabsContent value="analysis" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* API設定 */}
              <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5" />
                    API設定
                  </CardTitle>
                  <CardDescription>
                    Google AI StudioでGemini APIキーを取得してください
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="api-key">Gemini APIキー</Label>
                    <div className="relative">
                      <Input
                        id="api-key"
                        type={apiKeyVisible ? "text" : "password"}
                        value={apiKey}
                        onChange={(e) => setApiKey(e.target.value)}
                        placeholder="AIzaSy..."
                        className="pr-10"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-0 top-0 h-full px-3"
                        onClick={() => setApiKeyVisible(!apiKeyVisible)}
                      >
                        {apiKeyVisible ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>
                  
                  {apiKey && (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-sm text-green-800">✓ APIキーが設定されました</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* 問題入力 */}
              <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Brain className="h-5 w-5" />
                    問題入力
                  </CardTitle>
                  <CardDescription>
                    分析したい問題を自然言語で入力してください
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="problem-text">問題文</Label>
                    <Textarea
                      id="problem-text"
                      value={problemText}
                      onChange={(e) => setProblemText(e.target.value)}
                      placeholder="例：2つの企業が価格競争を行っています。企業Aが高価格を設定した場合の利益は100、低価格の場合は80です..."
                      rows={8}
                      className="resize-none"
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500">
                      {problemText.length} 文字
                    </span>
                    <Button
                      onClick={handleAnalyze}
                      disabled={!apiKey || !problemText.trim() || isAnalyzing}
                      className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                    >
                      {isAnalyzing ? '分析中...' : '分析開始'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* 分析進捗 */}
            {isAnalyzing && (
              <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
                <CardHeader>
                  <CardTitle>分析進捗</CardTitle>
                  <CardDescription>
                    AIエージェントが段階的に分析を実行しています
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <div className="w-4 h-4 bg-blue-600 rounded-full animate-pulse" />
                      </div>
                      <div>
                        <p className="font-medium">問題文を解析中...</p>
                        <p className="text-sm text-gray-600">キーワードと構造を特定しています</p>
                      </div>
                    </div>
                    
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div className="bg-gradient-to-r from-blue-600 to-purple-600 h-2 rounded-full animate-pulse" style={{width: '60%'}} />
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          {/* 結果タブ */}
          <TabsContent value="results" className="space-y-6">
            <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
              <CardContent className="flex items-center justify-center py-12">
                <div className="text-center">
                  <Calculator className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">分析結果はまだありません</h3>
                  <p className="text-gray-600">問題を入力して分析を開始してください</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* 可視化タブ */}
          <TabsContent value="visualization" className="space-y-6">
            <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
              <CardContent className="flex items-center justify-center py-12">
                <div className="text-center">
                  <BarChart3 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">可視化データはまだありません</h3>
                  <p className="text-gray-600">分析を実行すると、図解とチャートが表示されます</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* 設定タブ */}
          <TabsContent value="settings" className="space-y-6">
            <Card className="bg-white/60 backdrop-blur-sm border-slate-200">
              <CardHeader>
                <CardTitle>アプリケーション情報</CardTitle>
                <CardDescription>
                  ゲーム理論分析エージェントの詳細情報
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>バージョン</Label>
                    <Badge variant="outline">v2.0.0</Badge>
                  </div>
                  <div className="space-y-2">
                    <Label>ビルド日時</Label>
                    <p className="text-sm text-gray-600">{new Date().toLocaleDateString()}</p>
                  </div>
                  <div className="space-y-2">
                    <Label>対応分析手法</Label>
                    <div className="flex flex-wrap gap-1">
                      <Badge variant="secondary" className="text-xs">ゲーム理論</Badge>
                      <Badge variant="secondary" className="text-xs">線形計画法</Badge>
                      <Badge variant="secondary" className="text-xs">待ち行列理論</Badge>
                      <Badge variant="secondary" className="text-xs">在庫管理</Badge>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label>使用技術</Label>
                    <div className="flex flex-wrap gap-1">
                      <Badge variant="outline" className="text-xs">React</Badge>
                      <Badge variant="outline" className="text-xs">Gemini AI</Badge>
                      <Badge variant="outline" className="text-xs">Mermaid</Badge>
                      <Badge variant="outline" className="text-xs">Recharts</Badge>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

export default App



